// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// osqpSetup
SEXP osqpSetup(const S4& P, const NumericVector& q, const S4& A, const NumericVector& l, const NumericVector& u, const List& pars);
RcppExport SEXP _osqp_osqpSetup(SEXP PSEXP, SEXP qSEXP, SEXP ASEXP, SEXP lSEXP, SEXP uSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const S4& >::type P(PSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const S4& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const List& >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(osqpSetup(P, q, A, l, u, pars));
    return rcpp_result_gen;
END_RCPP
}
// osqpSolve
List osqpSolve(SEXP workPtr);
RcppExport SEXP _osqp_osqpSolve(SEXP workPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type workPtr(workPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(osqpSolve(workPtr));
    return rcpp_result_gen;
END_RCPP
}
// osqpGetParams
List osqpGetParams(SEXP workPtr);
RcppExport SEXP _osqp_osqpGetParams(SEXP workPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type workPtr(workPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(osqpGetParams(workPtr));
    return rcpp_result_gen;
END_RCPP
}
// osqpGetDims
IntegerVector osqpGetDims(SEXP workPtr);
RcppExport SEXP _osqp_osqpGetDims(SEXP workPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type workPtr(workPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(osqpGetDims(workPtr));
    return rcpp_result_gen;
END_RCPP
}
// osqpUpdate
void osqpUpdate(SEXP workPtr, Rcpp::Nullable<NumericVector> q_new, Rcpp::Nullable<NumericVector> l_new, Rcpp::Nullable<NumericVector> u_new, Rcpp::Nullable<NumericVector> Px, Rcpp::Nullable<IntegerVector> Px_idx, Rcpp::Nullable<NumericVector> Ax, Rcpp::Nullable<IntegerVector> Ax_idx);
RcppExport SEXP _osqp_osqpUpdate(SEXP workPtrSEXP, SEXP q_newSEXP, SEXP l_newSEXP, SEXP u_newSEXP, SEXP PxSEXP, SEXP Px_idxSEXP, SEXP AxSEXP, SEXP Ax_idxSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type workPtr(workPtrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type q_new(q_newSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type l_new(l_newSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type u_new(u_newSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type Px(PxSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerVector> >::type Px_idx(Px_idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type Ax(AxSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<IntegerVector> >::type Ax_idx(Ax_idxSEXP);
    osqpUpdate(workPtr, q_new, l_new, u_new, Px, Px_idx, Ax, Ax_idx);
    return R_NilValue;
END_RCPP
}
// osqpUpdateSettings
void osqpUpdateSettings(SEXP workPtr, SEXP val, std::string nm);
RcppExport SEXP _osqp_osqpUpdateSettings(SEXP workPtrSEXP, SEXP valSEXP, SEXP nmSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type workPtr(workPtrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type val(valSEXP);
    Rcpp::traits::input_parameter< std::string >::type nm(nmSEXP);
    osqpUpdateSettings(workPtr, val, nm);
    return R_NilValue;
END_RCPP
}
// osqpGetData
SEXP osqpGetData(SEXP workPtr, std::string nm);
RcppExport SEXP _osqp_osqpGetData(SEXP workPtrSEXP, SEXP nmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type workPtr(workPtrSEXP);
    Rcpp::traits::input_parameter< std::string >::type nm(nmSEXP);
    rcpp_result_gen = Rcpp::wrap(osqpGetData(workPtr, nm));
    return rcpp_result_gen;
END_RCPP
}
// osqpWarmStart
void osqpWarmStart(SEXP workPtr, Rcpp::Nullable<NumericVector> x, Rcpp::Nullable<NumericVector> y);
RcppExport SEXP _osqp_osqpWarmStart(SEXP workPtrSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type workPtr(workPtrSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<NumericVector> >::type y(ySEXP);
    osqpWarmStart(workPtr, x, y);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_osqp_osqpSetup", (DL_FUNC) &_osqp_osqpSetup, 6},
    {"_osqp_osqpSolve", (DL_FUNC) &_osqp_osqpSolve, 1},
    {"_osqp_osqpGetParams", (DL_FUNC) &_osqp_osqpGetParams, 1},
    {"_osqp_osqpGetDims", (DL_FUNC) &_osqp_osqpGetDims, 1},
    {"_osqp_osqpUpdate", (DL_FUNC) &_osqp_osqpUpdate, 8},
    {"_osqp_osqpUpdateSettings", (DL_FUNC) &_osqp_osqpUpdateSettings, 3},
    {"_osqp_osqpGetData", (DL_FUNC) &_osqp_osqpGetData, 2},
    {"_osqp_osqpWarmStart", (DL_FUNC) &_osqp_osqpWarmStart, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_osqp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
